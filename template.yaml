AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Lambda Function for Custom Authorizer.
Resources:
  EncryptionDecryptionKey:
    Type: AWS::KMS::Key
    Properties:
      Description: "Encryption and Decryption key for Lambda Function Environment Variables"
      KeyPolicy:
        Id: "LambdaEncDec"
        Version: "2012-10-17"
        Statement:
          -
            Sid: "Allow administration of the key"
            Effect: "Allow"
            Action:
              - "kms:*"
            Principal:
              AWS: !Ref AWS::AccountId
            Resource: '*'
          -
            Sid: "Allow Encryption Service to use this key"
            Effect: "Allow"
            Action:
              - "kms:Encrypt"
            Principal:
              AWS: !GetAtt LambdaFunctionIAMRole.Arn
            Resource: '*'
          -
            Sid: "Allow Decryption Service to use this key"
            Effect: "Allow"
            Action:
              - "kms:Decrypt"
            Principal:
              AWS: !GetAtt LambdaFunctionIAMRole.Arn
            Resource: '*'

  LambdaFunctionIAMRole:
      Type: "AWS::IAM::Role"
      Properties:
          Path: "/"
          AssumeRolePolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Sid: "AllowLambdaServiceToAssumeRole"
                Effect: "Allow"
                Action:
                  - "sts:AssumeRole"
                Principal:
                  Service:
                    - "lambda.amazonaws.com"
          Policies:
            -
              PolicyName: "InlinePolicy"
              PolicyDocument:
                Version: "2012-10-17"
                Statement:
                  -
                    Effect: "Allow"
                    Action:
                      - "logs:CreateLogGroup"
                      - "logs:CreateLogStream"
                      - "logs:PutLogEvents"
                    Resource: "arn:aws:logs:*:*:*"

  LambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: authorizer.lambda_handler
      Runtime: python2.7
      CodeUri: s3://sgas.sam.aws-services-authorizer/authorizer.zip
      Role: !GetAtt LambdaFunctionIAMRole.Arn
      Timeout: 300
      Environment:
        Variables:
          SSO_HOST: "qa-sungard.sso.sungardas.io"
          SSO_BASIC_AUTH_USERNAME: "msaws"
          SSO_BASIC_AUTH_PASSWORD: "Sungard01"
          SSO_MASTER_TOKEN: "ffffffff-ffff-ffff-ffff-ffffffffffff"
